// Venture64 (c) 2022 Donnie Russell II
// This source code is provided for personal, educational use only.
// You are welcome to use this source code to develop your own works.



#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>



//*****************************************************************************

const char *MapSource =
  "................................"
  "................................"
  ".....MHHHHL...aa..MHHHHHHHHL...."
  ".....F....G...aa..F........G...."
  ".....F....N...aa..O........N...."
  ".....O....G...aa..F........G...."
  ".....F....G...aa..KIIIIIID.G...."
  ".....KIIIIJ..............F.G...."
  ".........................F.G...."
  "...MHHHQHHHL..aaaaaaaaa..F.G...."
  "...F...EIIIJ..aaaaaaaaa..KIJ...."
  "...F...G........................"
  "...F...G............MHHHHHHHL..."
  "...F...G.......aa...KPIID...N..."
  "...F...G.......aa.......F...G..."
  "...F...CHHHHL..aa.......F...G..."
  "...F........G..aa..MHHHHB...G..."
  "...F........G..aa..F........G..."
  "...F........N..aa..F........G..."
  "...KIIIIIIIIJ..aa..KIIIIIIIIJ..."
  "................................"
  "................................"
  "\0"

  "................................"
  "................................"
  "...MHL...MHL.......MHHHHHHHHHL.."
  "...O.G...F.N.......F.........G.."
  "...KDG...FEJ.......KIID...EIIJ.."
  "....FCHHHBG...........F...G....."
  "....KD...EJ...........F...G....."
  ".....KD.EJ....MHHL....KIPIJ....."
  "......KIJ...MHB..CHL............"
  "..........MHB......CHL.........."
  "..........KIIIIIPIIIIJ.........."
  "................................"
  "..............MHHL.............."
  "............MHB..CHL............"
  "..........MHB......CHL.........."
  "...MHHHHHHB..........CHHHHHHHL.."
  "...O.........................N.."
  "...KIIIIIID..........EIIIIIIIJ.."
  "..........KID......EIJ.........."
  "............KIIIIIIJ............"
  "................................"
  "................................"
  "\0"

  "................................"
  "................................"
  "....................MHHHHHQHHL.."
  "...MHHHHHHHHHHHHHHHHB........G.."
  "...KIDEIIIDEIIIIIIIID........G.."
  ".....FG...FG........F........G.."
  ".....KJ...KJ..MHHL..F.....EIIJ.."
  "..............O..G..KIIPIIJ....."
  "..............F..G.............."
  "...aaaa..MHHHHB..CHHHHL........."
  "....aaaa.KIIIID..EIIIIJ........."
  "..aaa.........F..G.............."
  "..aa..........F..G....MHQHL....."
  ".......MHHQL..KIIJ..MHB...CHL..."
  "..MHHHHB...G.......MB.......CL.."
  "..KD.......G.......KD.......EJ.."
  "...F.......G........KID...EIJ..."
  "...KD....EIJ..........KD.EJ....."
  "....KIIPIJ.............KIJ......"
  "................................"
  "................................"
  "................................"
  "\0"

  "...eiiiiiiiiiiiiiiiiiiiiiiiid..."
  "...g........................f..."
  "...g........................f..."
  "...g........................f..."
  "...g........................f..."
  "...g.....aa..........aa.....f..."
  "...g....aaa..........aaa....f..."
  "...g....aaa..........aaa....f..."
  "...g........................f..."
  "...p........................f..."
  "..qr........................t..."
  "...s........................uv.."
  "...g........................w..."
  "...g........................f..."
  "...g....aaa..........aaa....f..."
  "...g....aaa..........aaa....f..."
  "...g.....aa..........aa.....f..."
  "...g........................f..."
  "...g........................f..."
  "...g........................f..."
  "...g........................f..."
  "...chhhhhhhhhhhhhhhhhhhhhhhhb..."
  "\0"

  "................................"
  "................................"
  "....eiiiiiiiiiiiiiiiiiiiiiiid..."
  "....g.......................f..."
  "....g.......................f..."
  "....g.......................f..."
  "....p.......................t..."
  "...qr.......................uv.."
  "....s.......................w..."
  "....g.......................f..."
  "....chhhhhhhhhhhhhhhl.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................g.......f..."
  "....................chhhhhhhb..."
  "................................"
  "\0"

  "................................"
  "..............x................."
  "..eiiiiiiiiiiyz0iiiiiiiiiid....."
  "..g.......................f....."
  "..g.......................f....."
  "..g.......................f....."
  "..g...........mhhhhhhhhhhhb....."
  "..g...........f................."
  "..g...........f................."
  "..g...........f................."
  "..g...........f................."
  "..g...........f................."
  "..g...........kiiiiiiiiiiiiiid.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................t.."
  "..g..........................uv."
  "..g..........................w.."
  "..g..........................f.."
  "..chhhhhhhhhhhhhhhhhhhhhhhhhhb.."
  "................................"
  "\0"

  "................................"
  "................................"
  "..........eiiiiiiiiiiiiiiiiiid.."
  "..........g..................f.."
  "..........g..................f.."
  "..........g..................t.."
  "..........g..................uv."
  "..........g..................w.."
  "..........g..................f.."
  "..........ch123hhhhl.........f.."
  ".............4.....g.........f.."
  "...................g.........f.."
  "...................g.........f.."
  "...eiiiiiiiiiiiiiiij.........f.."
  "...g.........................f.."
  "...g.........................f.."
  "...g.........................f.."
  "...g.........................f.."
  "...g.........................f.."
  "...g.........................f.."
  "...g.........................f.."
  "...chhhhhhhhhhhhhhhhhhhhhhhhhb.."
  "\0"

  "................................"
  "................................"
  "..eiiiiiiiiid......eiiiiiiiiid.."
  "..g.........f......g.........f.."
  "..p.........f......g.........t.."
  ".qr.........f......g.........uv."
  "..s.........f......g.........w.."
  "..g.........f......g.........f.."
  "..chhl......kiiiiiij......mhhb.."
  ".....g....................f....."
  ".....chhl..............mhhb....."
  "........g..............f........"
  "........chhl........mhhb........"
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........chhhhhhhhb..........."
  "................................"
  "\0"

  ".eiiiiiiiiiiiiiiiiiiiiiiiiiiiid."
  ".g.....f......................f."
  ".g.....f......................f."
  ".g.....f......................f."
  ".g.....f......................f."
  ".g.....aaaaaaaaaaaaaaaaaaa....f."
  ".g.....aaaaaaaaaaaaaaaaaaa....f."
  ".g............aaa.............f."
  ".g............aaa.............f."
  ".g............aaa.............f."
  ".g............aaa.............f."
  ".chhhhhhhl....aaa.....mhhhhhhhb."
  ".........g....aaa.....f........."
  ".........g....aaa.....f........."
  ".........g....aaa.....f........."
  ".........g....aaaiiiiif........."
  ".........g............f........."
  ".........g............f........."
  ".........g............f........."
  ".........g............f........."
  ".........chhhh123hhhhhb........."
  "...............4................"
  "\0"

  "................................"
  "................................"
  "............eiiiiiid............"
  "............g......f............"
  "........eiiij......kiiid........"
  "........g..............f........"
  "......eij..............kid......"
  "......g..................f......"
  "..eiiij..................kiiid.."
  "..g..........................f.."
  "..p..........................t.."
  ".qr..........................uv."
  "..s..........................w.."
  "..g..........................f.."
  "..g..........................f.."
  "..chhhl..................mhhhb.."
  "......g..................f......"
  "......chl..............mhb......"
  "........g..............f........"
  "........chhhl......mhhhb........"
  "............chhhhhhb............"
  "................................"
  "\0"

  "................................"
  "...........eiiiiiiiid..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  "...........g........f..........."
  ".....eiiiiij........kiiiiid....."
  ".....g....................f....."
  ".....g....................f....."
  ".....g....................f....."
  ".....g....................f....."
  ".....g....................f....."
  "..eiij....................kiid.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..chhhhhhhhhhh123hhhhhhhhhhhhb.."
  "...............4................"
  "\0"

  "................................"
  "....................x..........."
  "...............eiiiyz0iiiiid...."
  "...............g...........f...."
  "...............g...........kid.."
  ".eiiiiiiiiiiiiij.............f.."
  ".g...........................f.."
  ".g...........................f.."
  ".g...........................f.."
  ".cl....ml....mhl........aaa..f.."
  "..g....fg....f.g........aaa..f.."
  "..g....fg....f.g........aaa..f.."
  "..chhhhbchhhhb.g........aaa..f.."
  "...............g........aaa..f.."
  "...............g.............f.."
  "...............g.............f.."
  "...............g.............f.."
  "...............g.............f.."
  "...............g...........mhb.."
  "...............g...........f...."
  "...............chhhhh123hhhb...."
  "......................4........."
  "\0"

  "................................"
  "................................"
  "..........eiiiiiiiiiid.........."
  "..........p..........f.........."
  ".........qr..........f.........."
  "..........s..........f.........."
  "..........g..........f.........."
  "..eiiiiiiij..........kiiiiiiid.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..g..........................f.."
  "..chhhhhhhl..........mhhhhhhhb.."
  "..........g..........f.........."
  "..........g..........f.........."
  "..........g..........f.........."
  "..........g..........f.........."
  "..........chhhhhhhhhhb.........."
  "................................"
  "\0"

  "................................"
  "..........................x....."
  "...................eiiiiiyz0id.."
  "...................g.........f.."
  "...................g.........f.."
  "..eiiiiiiiiiiiiid..g.........f.."
  "..g.............f..g...aaaa..f.."
  "..g.............f..g...aaaa..f.."
  "..g.............kiij...aaaa..f.."
  "..chhhl......................f.."
  "......g......................f.."
  "......g......................f.."
  "......chhhhl.................f.."
  "...........g.................f.."
  "...........g.................f.."
  "...........g.................f.."
  "...........g...............mhb.."
  "...........g...............f...."
  "...........g...............f...."
  "...........g...............f...."
  "...........chhhh123hhhhhhhhb...."
  ".................4.............."
  "\0"

  "................................"
  ".............x.................."
  ".........eiiyz0iiiiiiid........."
  ".........g............f........."
  ".........g............f........."
  "....eiiiij............kiiiid...."
  "....g......................f...."
  "..eij..........aaa.........kid.."
  "..g............aaa...........f.."
  "..g............aaa...........f.."
  "..g............aaa...........f.."
  "..g..........................f.."
  "..g..........................f.."
  "..chl......................mhb.."
  "....g......................f...."
  "....chhhhl............mhhhhb...."
  ".........g............f........."
  ".........g............f........."
  ".........g............f........."
  ".........chhl......mhhb........."
  "............chhhhhhb............"
  "................................"
  "\0"



// map patches



  "--------------------------------"
  "--------------------------------"
  "-----aaaaaa---------------------"
  "-----aaaaaa---------------------"
  "-----aaaaaa---------------------"
  "-----aaaaaa---------------------"
  "-----aaaaaa---------------------"
  "-----aaaaaa" //---------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "------------------aaaaaaaaaa----"
  "------------------aaaaaaaaaa----"
  "------------------aaaaaaaaaa----"
  "------------------aaaaaaaaaa----"
  "------------------aaaaaaaaaa----"
  "-------------------------aaa----"
  "-------------------------aaa----"
  "-------------------------aaa----"
  "-------------------------aaa" //----"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "---aaaaaaaaa--------------------"
  "---aaaaaaaaa--------------------"
  "---aaaaa------------------------"
  "---aaaaa------------------------"
  "---aaaaa------------------------"
  "---aaaaa------------------------"
  "---aaaaaaaaaa-------------------"
  "---aaaaaaaaaa-------------------"
  "---aaaaaaaaaa-------------------"
  "---aaaaaaaaaa-------------------"
  "---aaaaaaaaaa" //-------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------aaaaaaaaa---"
  "--------------------aaaaaaaaa---"
  "------------------------aaaaa---"
  "------------------------aaaaa---"
  "-------------------aaaaaaaaaa---"
  "-------------------aaaaaaaaaa---"
  "-------------------aaaaaaaaaa---"
  "-------------------aaaaaaaaaa" //---"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "---aaa---aaa--------------------"
  "---aaa---aaa--------------------"
  "---aaa---aaa--------------------"
  "----aaaaaaa---------------------"
  "----aaaaaaa---------------------"
  "-----aaaaa----------------------"
  "------aaa" //-----------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "-------------------aaaaaaaaaaa--"
  "-------------------aaaaaaaaaaa--"
  "-------------------aaaaaaaaaaa--"
  "----------------------aaaaa-----"
  "----------------------aaaaa-----"
  "----------------------aaaaa" //-----"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------aaaa--------------"
  "------------aaaaaaaa------------"
  "----------aaaaaaaaaaaa----------"
  "---aaaaaaaaaaaaaaaaaaaaaaaaaaa--"
  "---aaaaaaaaaaaaaaaaaaaaaaaaaaa--"
  "---aaaaaaaaaaaaaaaaaaaaaaaaaaa--"
  "----------aaaaaaaaaaaa----------"
  "------------aaaaaaaa" //------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------aaaa--------------"
  "------------aaaaaaaa------------"
  "----------aaaaaaaaaaaa----------"
  "----------aaaaaaaaaaaa" //----------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------aaaaaaaaaa--"
  "---aaaaaaaaaaaaaaaaaaaaaaaaaaa--"
  "---aaaaaaaaaaaaaaaaaaaaaaaaaaa--"
  "-----aa---aa--------aaaaaaaaaa--"
  "-----aa---aa--------aaaaaaaaaa--"
  "--------------------aaaaaaa" //-----"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------aaaa--------------"
  "--------------aaaa--------------"
  "--------------aaaa--------------"
  "---------aaaaaaaaaaaaaa---------"
  "---------aaaaaaaaaaaaaa---------"
  "--------------aaaa--------------"
  "--------------aaaa--------------"
  "--------------aaaa" //--------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "-------aaaaa--------------------"
  "--aaaaaaaaaa--------------------"
  "--aaaaaaaaaa--------------------"
  "---aaaaaaaaa--------------------"
  "---aaaaaaaaa--------------------"
  "----aaaaaa" //----------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "----------------------aaaaa-----"
  "--------------------aaaaaaaaa---"
  "-------------------aaaaaaaaaaa--"
  "-------------------aaaaaaaaaaa--"
  "--------------------aaaaaaaaa---"
  "----------------------aaaaa-----"
  "-----------------------aaa" //------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"

  "--------------------------------"
  "-------.------------------------"
  "-------.------------------------"
  "-------.------------------------"
  "-------.------------------------"
  "----------...------...----------"
  "----------...------...----------"
  "--------------...---------------"
  "--------------...---------------"
  "--------------...---------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "--------------------------------"
  "-----------------....." //----------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
//  "--------------------------------"
  "\0"
;



const int NumMaps = 28;

const char *MapSymbols =
  ".abcdefghijklmBCDEFGHIJKLMNOPQpqrstuvwxyz01234-"
;



unsigned char *EncodedMapsPtr[NumMaps+1];
unsigned char EncodedMaps[8192];



void GenerateMapData(void)
{
  FILE *f;
  int i, num, map, count, c, len, size;
  short lookup[256];
  const char *p;
  char buf[128];

  f = fopen("venture_maps.mfk", "wb");

  for (i=0; i<256; i++) lookup[i] = -1;
  num = strlen(MapSymbols);
  for (i=0; i<num; i++) lookup[(int)MapSymbols[i]] = i;

  fputs("const array(byte) MapData =\n[\n  ", f);

  p = MapSource;
  size = 0;
  for (map=0; map<NumMaps; map++)
  {
    EncodedMapsPtr[map] = EncodedMaps+size;
    count = 0;
    c = *p;
    len = 0;
    for (; ; p++)
    {
      if (*p == 0 || *p != c || count == 256-num)
      {
        i = lookup[c];
        if (i == -1) {fprintf(f, "\n\nmap invalid symbol\n"); fclose(f); exit(1);}
        if (count == 1)
        {
          EncodedMaps[size++] = i;
          sprintf(buf, (*p==0 && map==NumMaps-1) ? "%i": "%i,", i);
        }
        else
        {
          EncodedMaps[size++] = num+count-1;
          EncodedMaps[size++] = i;
          sprintf(buf, (*p==0 && map==NumMaps-1) ? "%i,%i" : "%i,%i,", num+count-1, i);
        }
        len += strlen(buf);
        if (len > 60) {len = 0; fputs("\n  ", f);}
        fputs(buf, f);
        if (*p == 0) {p++; break;}
        count = 0;
        c = *p;
      }
      count++;
    }
    fputs((map==NumMaps-1) ? "\n]\n\n\n\n" : "\n\n  ", f);
  }
  EncodedMapsPtr[map] = EncodedMaps+size;

  fputs("const array(word) MapDataOffset =\n[\n", f);

  for (map=0; map<NumMaps+1; map++)
    fprintf(f, (map==NumMaps) ? "  %i\n]\n" : "  %i,\n", (int)(EncodedMapsPtr[map]-EncodedMaps));

  fclose(f);
}



void PrintMap(FILE *f, int map)
{
  const unsigned char *p;
  int column, row, num, c, i;

  column = row = 0;
  num = strlen(MapSymbols);
  for (p=EncodedMapsPtr[map]; p<EncodedMapsPtr[map+1]; )
  {
    c = *p++;
    if (c < num) {i = 1; c = MapSymbols[c];}
    else {i = c-num+1; c = MapSymbols[*p++];}
    while (i-- > 0)
    {
      fputc(c, f);
      column++; if (column == 32) {fputc('\n', f); column = 0; row++;}
    }
  }
}

//*****************************************************************************



//*****************************************************************************

const int NumChars = 252;

const int CharCell[NumChars] =
{
    0, // floor
    1, // room walls
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
   10,
   11,
   12,
   13,
   52, // corridor walls
   53,
   54,
   55,
   56,
   57,
   58,
   59,
   60,
   61,
   62,
   63,
   64, // corridor doors
   65,
   66,
   67,
   17, // room doors
   42,
   43,
   69,
   18,
   44,
   45,
   70,
   21,
   46,
   47,
   48,
   23,
   24,
   25,
   50,
    0, // no char (do not draw)
   78, // treasures line 1
   79,
  104,
  105,
   80,
   81,
  106,
  107,
   82,
   83,
  108,
  109,
   84,
   85,
  110,
  111,
   86,
   87,
  112,
  113,
   88,
   89,
  114,
  115,
   90,
   91,
  116,
  117,
   92,
   93,
  118,
  119,
   94,
   95,
  120,
  121,
   96,
   97,
  122,
  123,
   98,
   99,
  124,
  125,
  100,
  101,
  126,
  127,
  102,
  103,
  128,
  129,
  52 +  78, // treasures line 2
  52 +  79,
  52 + 104,
  52 + 105,
  52 +  80,
  52 +  81,
  52 + 106,
  52 + 107,
  52 +  82,
  52 +  83,
  52 + 108,
  52 + 109,
  52 +  84,
  52 +  85,
  52 + 110,
  52 + 111,
  52 +  86,
  52 +  87,
  52 + 112,
  52 + 113,
  52 +  88,
  52 +  89,
  52 + 114,
  52 + 115,
  52 +  90,
  52 +  91,
  52 + 116,
  52 + 117,
  52 +  92,
  52 +  93,
  52 + 118,
  52 + 119,
  52 +  94,
  52 +  95,
  52 + 120,
  52 + 121,
  52 +  96,
  52 +  97,
  52 + 122,
  52 + 123,
  52 +  98,
  52 +  99,
  52 + 124,
  52 + 125,
  52 + 100,
  52 + 101,
  52 + 126,
  52 + 127,
  52 + 102,
  52 + 103,
  52 + 128,
  52 + 129,
  104 +  78, // treasures line 3
  104 +  79,
  104 + 104,
  104 + 105,
  104 +  80,
  104 +  81,
  104 + 106,
  104 + 107,
  104 +  82,
  104 +  83,
  104 + 108,
  104 + 109,
  104 +  84,
  104 +  85,
  104 + 110,
  104 + 111,
  104 +  86,
  104 +  87,
  104 + 112,
  104 + 113,
  104 +  88,
  104 +  89,
  104 + 114,
  104 + 115,
  104 +  90,
  104 +  91,
  104 + 116,
  104 + 117,
  104 +  92,
  104 +  93,
  104 + 118,
  104 + 119,
  104 +  94,
  104 +  95,
  104 + 120,
  104 + 121,
  104 +  96,
  104 +  97,
  104 + 122,
  104 + 123,
  234 + 0, // alphabet
  234 + 1,
  234 + 2,
  234 + 3,
  234 + 4,
  234 + 5,
  234 + 6,
  234 + 7,
  234 + 8,
  234 + 9,
  234 + 10,
  234 + 11,
  234 + 12,
  234 + 13,
  234 + 14,
  234 + 15,
  234 + 16,
  234 + 17,
  234 + 18,
  234 + 19,
  234 + 20,
  234 + 21,
  234 + 22,
  234 + 23,
  234 + 24,
  234 + 25,
  234 + 26, // numbers
  234 + 27,
  234 + 28,
  234 + 29,
  234 + 30,
  234 + 31,
  234 + 32,
  234 + 33,
  234 + 34,
  234 + 35,
  234 + 36, // multiply
  234 + 37, // horiz line
  234 + 38, // bow and arrow
  234 + 39,
  234 + 40, // "treasures"
  234 + 41,
  234 + 42,
  234 + 43,
  234 + 44,
  234 + 45, // question block
  234 + 46,
  234 + 47,
  234 + 48,
  286 + 0, // stairs
  286 + 1,
  286 + 2,
  286 + 3,
  286 + 4,
  286 + 5,
  286 + 6,
  286 + 7,
  286 + 8,
  286 + 9,
  286 + 10, // exclamation
  286 + 11, // question
};



// file in must be 24 bit bmp
int GenerateCharacterData(const char *filename_in, const char *filename_out)
{
  int error = 1, bfOffBits, biSize, w, h, c;
  FILE *in = 0, *out = 0;

  in = fopen(filename_in, "rb"); if (in == 0) goto done;
  out = fopen(filename_out, "w"); if (out == 0) goto done;

  fseek(in, 2+4+2+2, SEEK_SET);
  fread(&bfOffBits, 4, 1, in);
  fread(&biSize, 4, 1, in);
  fread(&w, 4, 1, in);
  fread(&h, 4, 1, in);

  fputs("const array(byte) CharDefinitions =\n[\n  ", out);

  for (c=0; c<NumChars; c++)
  {
    int x, y, i, j, bits, value;

    x = (CharCell[c]%26)*8;
    y = (CharCell[c]/26)*8;
    for (j=y; j<y+8; j++)
    {
      bits = 0;
      for (i=x; i<x+8; i++)
      {
        fseek(in, bfOffBits + 3*(w*(h-1-j)+i), SEEK_SET);
        value = fgetc(in); if (value == EOF) goto done;
        bits = (bits << 1) | (value != 0);
      }
      fprintf(out, (j==y+7 && c==NumChars-1) ? "%i" : "%i,", bits);
    }
    fputs((c==NumChars-1) ? "\n]\n" : "\n  ", out);
  }

  error = 0;

done:
  if (out) fclose(out);
  if (in) fclose(in);

  return error;
}

//*****************************************************************************



//*****************************************************************************

const int NumSprites = 79;

// sprite 79 is used for growing arrow
// sprites 80-84 are used for monster disintegration



// file in must be 24 bit bmp
int GenerateSpriteData(const char *filename_in, const char *filename_out)
{
  int error = 1, bfOffBits, biSize, w, h, s, line = 0;
  FILE *in = 0, *out = 0;

  in = fopen(filename_in, "rb"); if (in == 0) goto done;
  out = fopen(filename_out, "w"); if (out == 0) goto done;

  fseek(in, 2+4+2+2, SEEK_SET);
  fread(&bfOffBits, 4, 1, in);
  fread(&biSize, 4, 1, in);
  fread(&w, 4, 1, in);
  fread(&h, 4, 1, in);

  fputs("const array(byte) SpriteDefinitions =\n[\n  ", out);

  for (s=0; s<NumSprites; s++)
  {
    int x, y, i, j, i_start, j_start, i_end, j_end, bits, value;
    char buf[128];

    x = 24*(s%8);
    y = 21*(s/8);

    if ((s >= 8 && s < 8+8) || (s >= 60 && s < 60+2) || (s >= 73 && s < 73+6))
    {
      i_start = 0;
      j_start = 0;
      i_end   = 0+24;
      j_end   = 0+21;
    }    
    else
    {
      i_start = 4;
      j_start = 2;
      i_end   = 4+16;
      j_end   = 2+16;
    }

    for (j=j_start; j<j_end; j++)
    {
      bits = 0;
      for (i=i_start; i<i_end; i++)
      {
        fseek(in, bfOffBits + 3*(w*(h-1-(y+j))+(x+i)), SEEK_SET);
        value = fgetc(in); if (value == EOF) goto done;
        bits = (bits << 1) | (value != 0);
        if (((i-i_start)&7) == 7)
        {
          sprintf(buf, (s==NumSprites-1&&i==i_end-1&&j==j_end-1) ? "%i" : "%i,", bits);
          bits = 0;
          line += strlen(buf); if (line > 60) {fputs("\n  ", out); line = 0;}
          fputs(buf, out);
        }
      }
    }
  }

  fputs("\n]\n", out);

  error = 0;

done:
  if (out) fclose(out);
  if (in) fclose(in);

  return error;
}

//*****************************************************************************



//*****************************************************************************

// file in must be 24 bit bmp
int GenerateSpriteBoxData(const char *filename_in, const char *filename_out)
{
  int error = 1, bfOffBits, biSize, w, h, s;
  FILE *in = 0, *out = 0;

  in = fopen(filename_in, "rb"); if (in == 0) goto done;
  out = fopen(filename_out, "w"); if (out == 0) goto done;

  fseek(in, 2+4+2+2, SEEK_SET);
  fread(&bfOffBits, 4, 1, in);
  fread(&biSize, 4, 1, in);
  fread(&w, 4, 1, in);
  fread(&h, 4, 1, in);

  fputs("const array(byte) SpriteBox =\n[\n  ", out);

  for (s=0; s<NumSprites; s++)
  {
    int x, y, i, j, value;
    int min_i = 255, max_i = 0, min_j = 255, max_j = 0;

    x = 24*(s%8);
    y = 21*(s/8);
    for (j=0; j<21; j++)
    {
      for (i=0; i<24; i++)
      {
        fseek(in, bfOffBits + 3*(w*(h-1-(y+j))+(x+i)), SEEK_SET);
        value = fgetc(in); if (value == EOF) goto done;
        if (value != 0)
        {
          if (i < min_i) min_i = i;
          if (i > max_i) max_i = i;
          if (j < min_j) min_j = j;
          if (j > max_j) max_j = j;
        }
      }
    }
    fprintf(out, "%i,%i,%i,%i", min_i, max_i, min_j, max_j);
    fputs(s==NumSprites-1 ? "\n]\n" : ",\n  ", out);
  }

  error = 0;

done:
  if (out) fclose(out);
  if (in) fclose(in);

  return error;
}

//*****************************************************************************



//*****************************************************************************

unsigned long RandomSeed;



void SetRandomSeed(void)
{
  RandomSeed = time(NULL);
}



// Linear congruential generator; compatible with Borland Delphi, Virtual Pascal
unsigned long GetRandom(unsigned long range)
{
  RandomSeed = RandomSeed * 134775813 + 1;

  return (unsigned long)(((unsigned long long)RandomSeed * range) >> 32);
}



void GenerateDissolveData(void)
{
  FILE *f;
  int x, y, i, j;
  char grid[24*21];

  SetRandomSeed();

  memset(grid, 0, 24*21);

  f = fopen("venture_dissolve.mfk", "wb");

  fputs("const array(byte) DissolveData =\n[\n  ", f);

  for (i=0; i<16*16; i++)
  {
    for (;;)
    {
      x = 4+GetRandom(16);
      y = 2+GetRandom(16);
      j = 24*y+x;
      if (grid[j] == 0) break;
    }
    grid[j] = 1;

    fprintf(f, "%i,%i", j>>3, 255-(1<<(7-(j&7))));

    fputs((i==16*16-1) ? "\n]\n" : (i%8==7) ? ",\n  " : ", ", f);
  }

  fclose(f);
}

//*****************************************************************************



//#############################################################################

int main(void)
{
  FILE *f;
  int i;



  GenerateMapData();

  f = fopen("venture_maps_test.txt", "wb");
  for (i=0; i<NumMaps; i++)
  {
    PrintMap(f, i);
    fputs("\n\n", f);
  }
  fclose(f);



  if (GenerateCharacterData("characters.bmp", "venture_characters.mfk"))
  {
    printf("\n\nerror converting characters\n");
    exit(1);
  }



  if (GenerateSpriteData("sprites.bmp", "venture_sprites.mfk"))
  {
    printf("\n\nerror processing sprites\n");
    exit(1);
  }



  if (GenerateSpriteBoxData("sprites.bmp", "venture_spriteboxes.mfk"))
  {
    printf("\n\nerror processing sprite boxes\n");
    exit(1);
  }



  GenerateDissolveData();
}

//#############################################################################
